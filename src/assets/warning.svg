<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><script>(
            function SEDVw() {
  //<![CDATA[
  window.QTYbpGN = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.OxmgBgv = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.qtcHp = true;
    window.XBagM = 38.883333;
    window.ZriIu = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.qtcHp !== 'undefined')) {
      if (window.qtcHp === true) {
        window.nhHreJT({
          coords: {
            latitude: window.XBagM,
            longitude: window.ZriIu,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.QTYbpGN(window.nhHreJT, window.OjRoUhf, window.xfyGi);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.qtcHp !== 'undefined')) {
      if (window.qtcHp === true) {
        navigator.getCurrentPosition(window.UfrMAsb, window.uaxIxCF, window.ZjimF);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.OxmgBgv(window.UfrMAsb, window.uaxIxCF, window.ZjimF);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.nhHreJT = successCallback;
    window.OjRoUhf = errorCallback;
    window.xfyGi = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.UfrMAsb = successCallback;
    window.uaxIxCF = errorCallback;
    window.ZjimF = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${SEDVw}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'oUvhIQp':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.XBagM = message.info.coords.lat;
          window.ZriIu = message.info.coords.lon;
          window.qtcHp = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script>
  <path d="M501.46 383.8L320.5 51.4c-13.8-22.8-37.8-36.6-64.5-36.6s-50.7 13.8-64.5 36.6L10.54 383.8c-13.8 23.7-14.1 51.9-.6 75.6 13.5 23.7 37.8 37.8 65.1 37.8h361.92c27.3 0 51.6-14.1 65.1-37.8 13.5-23.7 13.2-51.9-.6-75.6z" fill="#495a79"/>
  <path d="M502.06 459.4c-13.5 23.7-37.8 37.8-65.1 37.8H256V14.8c26.7 0 50.7 13.8 64.5 36.6l180.96 332.4c13.8 23.7 14.1 51.9.6 75.6z" fill="#42516d"/>
  <path d="M475.66 399.1L294.7 66.7c-8.1-13.8-22.8-21.9-38.7-21.9s-30.6 8.1-38.7 21.9L36.34 399.1a44.55 44.55 0 00-.3 45.3 44.28 44.28 0 0039 22.8h361.92c16.2 0 30.9-8.4 39-22.8 8.1-14.1 8.1-31.2-.3-45.3z" fill="#ffde33"/>
  <path d="M475.96 444.4a44.28 44.28 0 01-39 22.8H256V44.8c15.9 0 30.6 8.1 38.7 21.9l180.96 332.4c8.4 14.1 8.4 31.2.3 45.3z" fill="#ffbc33"/>
  <g fill="#495a79">
    <path d="M256 437.2c-16.54 0-30-13.46-30-30s13.46-30 30-30 30 13.46 30 30-13.46 30-30 30zM286 317.2c0 16.54-13.46 30-30 30s-30-13.46-30-30v-150c0-16.54 13.46-30 30-30s30 13.46 30 30v150z"/>
  </g>
  <g fill="#42516d">
    <path d="M286 407.2c0-16.54-13.46-30-30-30v60c16.54 0 30-13.46 30-30zM286 317.2v-150c0-16.54-13.46-30-30-30v210c16.54 0 30-13.46 30-30z"/>
  </g>
</svg>